// Service ƒë·ªÉ x·ª≠ l√Ω ·∫£nh t·ª´ Supabase Storage
import { supabase } from '../lib/supabase';

const supabaseUrl = 'https://oqtlakdvlmkaalymgrwd.supabase.co';

// Cache ƒë·ªÉ tr√°nh request tr√πng l·∫∑p
const imageCache = new Map();
const bucketCache = new Set();

// Ki·ªÉm tra bucket c√≥ t·ªìn t·∫°i kh√¥ng
const checkBucketExists = async (bucketName) => {
    if (bucketCache.has(bucketName)) {
        return true;
    }
    
    try {
        const { data, error } = await supabase.storage.listBuckets();
        if (!error && data) {
            const bucketExists = data.some(bucket => bucket.name === bucketName);
            if (bucketExists) {
                bucketCache.add(bucketName);
            }
            return bucketExists;
        }
    } catch (err) {
        console.log(`‚ùå Error checking bucket ${bucketName}:`, err.message);
    }
    
    return false;
};

export const getUserImageSrc = async (imagePath, name = 'User', size = 100) => {
    if (!imagePath) return null;
    
    // Ki·ªÉm tra cache tr∆∞·ªõc
    if (imageCache.has(imagePath)) {
        return imageCache.get(imagePath);
    }
    
    // N·∫øu imagePath ƒë√£ l√† URL ƒë·∫ßy ƒë·ªß, tr·∫£ v·ªÅ lu√¥n
    if (imagePath.startsWith('http')) {
        imageCache.set(imagePath, imagePath);
        return imagePath;
    }
    
    // X·ª≠ l√Ω path ƒë·ªÉ tr√°nh duplicate
    let cleanPath = imagePath;
    if (imagePath.startsWith('profiles/')) {
        cleanPath = imagePath.replace('profiles/', '');
    }
    
    console.log(`üîç Looking for image: ${cleanPath}`);
    
    // Th·ª≠ c√°c bucket v√† th∆∞ m·ª•c con
    const searchPaths = [
        { bucket: 'upload', path: `profiles/${cleanPath}` },
        { bucket: 'upload', path: cleanPath },
        { bucket: 'profiles', path: cleanPath },
        { bucket: 'avatars', path: cleanPath },
        { bucket: 'images', path: cleanPath }
    ];
    
    for (const { bucket, path } of searchPaths) {
        try {
            console.log(`üîç Checking bucket: ${bucket}, path: ${path}`);
            
            // Ki·ªÉm tra bucket c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc
            const bucketExists = await checkBucketExists(bucket);
            if (!bucketExists) {
                console.log(`‚ùå Bucket ${bucket} does not exist, skipping`);
                continue;
            }
            
            // Th·ª≠ t·∫°o signed URL v·ªõi th·ªùi gian d√†i h∆°n
            const signedUrlPromise = supabase.storage
                .from(bucket)
                .createSignedUrl(path, 86400); // 24 gi·ªù
            
            const timeoutPromise = new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout')), 3000)
            );
            
            const { data, error } = await Promise.race([signedUrlPromise, timeoutPromise]);
            
            if (!error && data?.signedUrl) {
                console.log(`‚úÖ Found image in bucket: ${bucket}, path: ${path}`);
                imageCache.set(imagePath, data.signedUrl);
                return data.signedUrl;
            } else if (error) {
                console.log(`‚ùå Bucket ${bucket}, path ${path} error:`, error.message);
            }
        } catch (bucketError) {
            console.log(`‚ùå Bucket ${bucket}, path ${path} exception:`, bucketError.message);
        }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y qua signed URL, th·ª≠ getPublicUrl
    for (const { bucket, path } of searchPaths) {
        try {
            console.log(`üîç Trying getPublicUrl for bucket: ${bucket}, path: ${path}`);
            const { data } = supabase.storage
                .from(bucket)
                .getPublicUrl(path);
            
            if (data?.publicUrl) {
                console.log(`‚úÖ getPublicUrl works: ${data.publicUrl}`);
                imageCache.set(imagePath, data.publicUrl);
                return data.publicUrl;
            }
        } catch (getPublicUrlError) {
            console.log(`‚ùå getPublicUrl failed for bucket ${bucket}, path ${path}:`, getPublicUrlError.message);
        }
    }
    
    // Fallback: th·ª≠ public URL tr·ª±c ti·∫øp
    for (const { bucket, path } of searchPaths) {
        const publicUrl = `${supabaseUrl}/storage/v1/object/public/${bucket}/${path}`;
        
        try {
            console.log(`üîç Checking public URL: ${publicUrl}`);
            const response = await fetch(publicUrl, { 
                method: 'HEAD',
                timeout: 3000 
            });
            
            if (response.ok) {
                console.log(`‚úÖ Public URL works: ${publicUrl}`);
                imageCache.set(imagePath, publicUrl);
                return publicUrl;
            }
        } catch (fetchError) {
            console.log(`‚ùå Public URL failed: ${publicUrl}`, fetchError.message);
        }
    }
    
    console.log('‚ùå No image found, returning null');
    // Tr·∫£ v·ªÅ null ƒë·ªÉ Avatar component c√≥ th·ªÉ fallback v·ªÅ placeholder
    imageCache.set(imagePath, null);
    return null;
};

export const getSupabaseFileUrl = (filePath) => {
    if (!filePath) return null;
    
    if (filePath.startsWith('http')) {
        return filePath;
    }
    
    return `${supabaseUrl}/storage/v1/object/public/${filePath}`;
};

// Debug function ƒë·ªÉ ki·ªÉm tra Supabase Storage
export const debugSupabaseStorage = async () => {
    console.log('üîç Debugging Supabase Storage...');
    
    try {
        // Ki·ªÉm tra buckets
        const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
        if (bucketsError) {
            console.error('‚ùå Error listing buckets:', bucketsError);
        } else {
            console.log('‚úÖ Available buckets:', buckets?.map(b => b.name) || []);
            
            // Ki·ªÉm tra files trong m·ªói bucket
            for (const bucket of buckets || []) {
                try {
                    const { data: files, error: filesError } = await supabase.storage
                        .from(bucket.name)
                        .list('', { limit: 10 });
                    
                    if (filesError) {
                        console.log(`‚ùå Error listing files in ${bucket.name}:`, filesError.message);
                    } else {
                        console.log(`‚úÖ Files in ${bucket.name}:`, files?.map(f => f.name) || []);
                    }
                } catch (listError) {
                    console.log(`‚ùå Exception listing files in ${bucket.name}:`, listError.message);
                }
            }
        }
        
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        const { data: session } = await supabase.auth.getSession();
        console.log('‚úÖ Current session:', session?.session ? 'Authenticated' : 'Not authenticated');
        
        return { buckets, session };
    } catch (error) {
        console.error('‚ùå Debug error:', error);
        return { error };
    }
};

// Function ƒë·ªÉ t·∫°o bucket profiles n·∫øu ch∆∞a c√≥
export const createProfilesBucket = async () => {
    try {
        console.log('üîß Creating profiles bucket...');
        
        const { data, error } = await supabase.storage.createBucket('profiles', {
            public: true,
            allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
            fileSizeLimit: 5242880 // 5MB
        });
        
        if (error) {
            console.error('‚ùå Error creating bucket:', error);
            return { success: false, error };
        }
        
        console.log('‚úÖ Profiles bucket created successfully');
        return { success: true, data };
    } catch (err) {
        console.error('‚ùå Exception creating bucket:', err);
        return { success: false, error: err };
    }
};

// Function ƒë·ªÉ upload avatar
export const uploadAvatar = async (file, userId) => {
    try {
        console.log('üì§ Uploading avatar...');
        
        // T·∫°o bucket n·∫øu ch∆∞a c√≥
        await createProfilesBucket();
        
        const fileName = `${userId}.png`;
        
        const { data, error } = await supabase.storage
            .from('profiles')
            .upload(fileName, file, {
                cacheControl: '3600',
                upsert: true
            });
        
        if (error) {
            console.error('‚ùå Error uploading avatar:', error);
            return { success: false, error };
        }
        
        console.log('‚úÖ Avatar uploaded successfully:', data);
        
        // C·∫≠p nh·∫≠t userData trong database
        const { error: updateError } = await supabase
            .from('users')
            .update({ image: `profiles/${fileName}` })
            .eq('id', userId);
        
        if (updateError) {
            console.error('‚ùå Error updating user image:', updateError);
        } else {
            console.log('‚úÖ User image updated in database');
        }
        
        return { success: true, data };
    } catch (err) {
        console.error('‚ùå Exception uploading avatar:', err);
        return { success: false, error: err };
    }
};
